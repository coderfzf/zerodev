version: '3.5'
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

services:
  nginx:
    build:
      context: ./services/nginx
      args:
        NGINX_VERSION: ${NGINX_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
    container_name: nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    volumes:
      - ${CODE_PATH}:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
      - ${LOG_PATH}/nginx:/var/log/nginx/:rw
    environment:
      TZ: "$TZ"
    restart: always
    networks:
      - backend

  golang:                                 
    build:
      context: ./services/golang                   
      args:
        - GO_VERSION=${GO_VERSION}
    container_name: golang
    environment:                          
      - TZ=${TZ}
    privileged: true
    volumes:                              
      - ${CODE_PATH}:/usr/src/code   
      - ${LOG_PATH}/go:/user/src/logs
    ports:                                
      - "8000:8000"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always                       

  php:
    image: ${PHP_VERSION}
    container_name: php
    volumes:
      - ${CODE_PATH}:/www/:cached
      - ./services/php/php.ini:/usr/local/etc/php/php.ini:cached
      - ./services/php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf:cached
      - ${LOG_PATH}/php:/var/log/php:cached
      - ${DATA_PATH}/composer:/tmp/composer
      - ${LOG_PATH}/supervisor:/var/log/supervisor/:rw
      - ./services/php/conf.d/:/etc/supervisor/conf.d/:rw
      - ./services/php/supervisord.conf:/etc/supervisor/supervisord.conf:ro
    restart: always
    cap_add:
      - SYS_PTRACE
    command:
      - /bin/sh
      - -c
      - |
        supervisord -n -c /etc/supervisor/supervisord.conf
    networks:
      - backend

  etcd:                                   
    image: bitnami/etcd:${ETCD_VERSION}                   
    container_name: etcd
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:                                
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always

  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    privileged: true
    volumes:
      - ${DATA_PATH}/mysql:/var/lib/mysql         
      - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
    ports:
      - "${MYSQL_PORT}:3306"                           
    networks:
      - backend
    restart: always

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH}/redis:/data                  
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
    ports:
      - "${REDIS_PORT}:6379"                           
    networks:
      - backend
    restart: always

  redis-manage:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: redis_manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}           # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}           # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}     # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}     # 设置连接的 Redis 服务端口号
    ports:
      - "${REDIS_MANAGE_PORT}:80"                      
    depends_on:                                        
      - redis                                          
    networks:
      - backend
    restart: always

  etcd-manage:
    image: evildecay/etcdkeeper:latest
    container_name: etcd_manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"                     
    depends_on:                                        
      - etcd                                           
    networks:
      - backend
    restart: always

  prometheus:
    image: bitnami/prometheus:latest
    container_name: promethues
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${PROMETHEUS_CONF_FILE}:/opt/bitnami/prometheus/conf/prometheus.yml   
    ports:
      - "${PROMETHEUS_PORT}:9090"                      
    networks:
      - backend
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                         
    networks:
      - backend
    restart: always

  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_VERSION}
    container_name: jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                         
    networks:
      - backend
    restart: always

  dtm:
    image: yedf/dtm:latest
    container_name: dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ${DTM_CONF_FILE}:/app/dtm/configs/config.yaml  
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always
